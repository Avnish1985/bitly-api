#summary List of API Methods.
#labels Featured

*Sections*
<wiki:toc max_depth="4" />

= Introduction =

The bit.ly API allows developers to intereact in a programmatic way with the bit.ly website. The current API version is *2.0.1*


= Authentication =

All APIs require authentication credentials supplied using HTTP Basic Authentication:

*login* / *password*

or as query arguments:

login=*login*&apiKey=*apiKey*

= Additional Parameters =

All APIs require a version identifier to be present:

version=*2.0.1*

All APIs support an optional return format specifier:

format=*json*

_We have plans to add support for RSS format for some API methods soon._

All APIs support an optional callback specifier for use with json return format:

callback=*callback*

APIs which take both shortUrl and hash as arguments must have one or the other present.


= REST API =

== /shorten ==
Given a long url, returns a shorter one.

* Parameters *
  * * longUrl *
    A long url to shorten, eg: http://betaworks.com
  * * keyword * (optional)
		Optional custom name for your url. Eg, use *myshort* to generate *http://bit.ly/myshort* as your short URL.

* Examples *
  * http://api.bit.ly/shorten?version=2.0.1&longUrl=http://cnn.com&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
  * http://bit.ly/app/demos/shorten.html
----

== /expand ==
Given a bit.ly url or hash, return long source url, ...

* Parameters *

Either *shortUrl* or *hash* must be given as a parameter.
  * *shortUrl*
    A bitly url, eg: http://bit.ly/1RmnUT
  * *hash*
    One or more bitly hashes, eg: 2bYgqR,1RmnUT

* Examples *
  * http://api.bit.ly/expand?version=2.0.1&shortUrl=http://bit.ly/31IqMl&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
  * http://bit.ly/app/demos/expand.html
----

== /info ==
Given a bit.ly url or hash, return information about that page, such as the long source url, ...

* Parameters *

Either *shortUrl* or *hash* must be given as a parameter.
  * *shortUrl*
    A single bitly url, eg: http://bit.ly/1RmnUT
  * *hash*
    One or more bitly hashes, eg: 2bYgqR,1RmnUT
  * *keys*
    One or more keys to limit the attributes returned about each bitly document, eg: htmlTitle,thumbnail

* Examples *
  * http://api.bit.ly/info?version=2.0.1&hash=31IqMl,3j4ir4&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
  * http://bit.ly/app/demos/stats.html
----



== /stats ==
Given a bit.ly url or hash, return traffic and referrer data.

* Parameters *

Either *shortUrl* or *hash* must be given as a parameter.
  * *shortUrl*
    A single bitly url, eg: http://bit.ly/1RmnUT
  * *hash*
    A single hash, eg: 1RmnUT


* Examples *
  * http://api.bit.ly/stats?version=2.0.1&shortUrl=http://bit.ly/31IqMl&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
  * http://bit.ly/app/demos/stats.html
----

== /errors ==
Get a list of bit.ly API error codes.

* Examples *
  * http://api.bit.ly/errors?version=2.0.1&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
----

= Javascript Client API =
  * http://bit.ly/app/demos/statsModule.html

bit.ly provides a javascript client library that makes it easy for developers to make calls to the bit.ly REST API.  The bit.ly javascript client library is available at:

http://bit.ly/javascript-api.js?version=latest&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07

To use the bit.ly javascript client library, *you must pass your login and apiKey in the URL.* If you do not have an apiKey, [http://bit.ly sign up for a bitly account] and go to your [http://bit.ly/account Account] page to get your apiKey.

To include the bit.ly javascript client library on one of your pages, add this inside the {{{<head>}}} tag:

{{{	<script type="text/javascript" charset="utf-8" src="http://bit.ly/javascript-api.js?version=latest&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07"></script>}}}

When you include the bit.ly javascript client library, a new instance of the *{{{BitlyApiClient}}}* class is instantiated and assigned to the global variable *{{{BitlyClient}}}*

== BitlyCB global namespace ==
Use the !BitlyCB namespace to define callback methods for API calls. See the !BitlyApiClient.call method below for an example of defining a callback in the !BitlyCB namespace.

== !BitlyApiClient class ==
Use an instance of the {{{BitlyApiClient}}} class to make calls to the bit.ly API using your login and apiKey. 

=== Instance Methods ===

==== new ====
Creates a new instance of {{{BitlyApiClient}}} class. Generally, you should not ever need to create your own instance of the {{{BitlyApiClient}}} class. Instead, you should use the {{{BitlyClient}}} global instance of the {{{BitlyApiClient}}} class that is instantiated when you include the bit.ly javascript client library.
* Parameters *
	* *login*
		bit.ly login
	* *apiKey*
		bit.ly apiKey
	* *version*
		Version of the bit.ly REST API to call.

==== call ====
Low level method for calling bit.ly REST API. 
* Parameters *
	* *method*
		Name of the bit.ly REST API method to call.
	* *params*
		Parameters of teh bit.ly REST API method being called.
	* *callback_method_name*
		Method to be called when response is returned from bit.ly REST API. Define this method within the !BitlyCB global namespace.

*Example:*
{{{
	BitlyCB.alertResponse = function(data) {
		var s = '';
		var first_result;
		// Results are keyed by longUrl, so we need to grab the first one.
		for	(var r in data.results) {
			first_result = data.results[r]; break;
		}
		for (var key in first_result) {
			s += key + ":" + first_result[key].toString() + "\n";
		}
		alert(s);
	}
	BitlyClient.call('shorten', {'longUrl': 'http://google.com', 'keyword': 'googy1'}, 'BitlyCB.alertResponse');
}}}

==== shorten ====
Shorten a long URL.
* Parameters *
	* *longUrl*
		Long URL to shorten.
	* *callback_method_name*
		Method to be called when response is returned from bit.ly REST API. Define this method within the !BitlyCB global namespace.

*Example:*
{{{
	BitlyCB.shortenResponse = function(data) {
		var s = '';
		var first_result;
		// Results are keyed by longUrl, so we need to grab the first one.
		for	(var r in data.results) {
			first_result = data.results[r]; break;
		}
		for (var key in first_result) {
			s += key + ":" + first_result[key].toString() + "\n";
		}
		alert(s);
	}
	BitlyClient.shorten('http://google.com', 'BitlyCB.shortenResponse');
}}}


==== expand ====
Expand a bit.ly URL.
* Parameters *
	* *shortenUrl*
		Short URL to expand.
	* *callback_method_name*
		Method to be called when response is returned from bit.ly REST API. Define this method within the !BitlyCB global namespace.

*Example:*
{{{
	BitlyCB.expandResponse = function(data) {
		var s = '';
		var first_result;
		// Results are keyed by longUrl, so we need to grab the first one.
		for	(var r in data.results) {
			first_result = data.results[r]; break;
		}
		for (var key in first_result) {
			s += key + ":" + first_result[key].toString() + "\n";
		}
		alert(s);
	}
	BitlyClient.expand('http://bit.ly/3j4ir4', 'BitlyCB.expandResponse');
	BitlyClient.expand('http://bit.ly/1YKMfY', 'BitlyCB.expandResponse');
}}}

==== info ====
Expand a bit.ly URL.
* Parameters *
	* *bitly_hashes_or_bitly_urls_csv*
		Either a single bit.ly URL or a comma separated list of bit.ly hashes.
	* *callback_method_name*
		Method to be called when response is returned from bit.ly REST API. Define this method within the !BitlyCB global namespace.

*Example:*
{{{
	BitlyCB.infoResponse = function(data) {
		var s = '';
		var result;
		for	(var r in data.results) {
			result = data.results[r];
			for (var key in result) {
				s += key + ":" + result[key].toString() + "\n";
			}
		}
		alert(s);
	}
	BitlyClient.info('3j4ir4,1YKMfY', 'BitlyCB.infoResponse');
}}}

==== stats ====
Get clicks and referrer data about a bit.ly URL.
* Parameters *
	* *bitly_hash_or_url*
		Either a single bit.ly URL or a single bit.ly hash.
	* *callback_method_name*
		Method to be called when response is returned from bit.ly REST API. Define this method within the !BitlyCB global namespace.

*Example:*
{{{
	BitlyCB.statsResponse = function(data) {
		var s = '';
		var result = data.results;
		for (var key in result) {
			s += key + ":" + result[key].toString() + "\n";
		}
		alert(s);
	}
	BitlyClient.stats('3j4ir4', 'BitlyCB.statsResponse');
}}}

==== addPageLoadEvent ====
Perform a function once the DOM is done rendering. You would use this if you want to safely manipulate the DOM, eg, append stats to all bit.ly link elements.
* Parameters *
	* *func*
		Either a reference to a function or an anonymous function to execute once the page has loaded.

*Example:*
{{{
	BitlyClient.addPageLoadEvent(function(){
		alert("Page is loaded. It's now safe to manipulate the DOM.");
	});
}}}

==== extractBitlyHash ====
Utility method for ensuring you have a bit.ly hash, given a bit.ly URL or hash.
* Parameters *
	* *bitly_url_or_hash*
		bit.ly URL (or hash) you want to convert into a simple bit.ly hash.

*Example:*
{{{
	alert(BitlyClient.extractBitlyHash("http://bit.ly/3j4ir4"));
}}}

==== createElement ====
Utility method for creating a DOM node to insert into the page.
* Parameters *
	* *element_type*
		Type of DOM node to create, eg: 'a' or 'div'
	* *attrs*
		Object containing key/value pairs specifying attributes you would like to set on the DOM node, eg: {'class': 'bitly_link', 'text': 'http://bit.ly/3j4ir4', 'href': 'http://bit.ly/3j4ir4'} *NOTE* Use the key *'text'* to set the innerText of the node.

*Example:*
{{{
	var a = BitlyClient.createElement('a', {'href': 'http://bit.ly', 'text': 'http://bit.ly'});
	document.body.appendChild(a);
}}}

==== setAttribute ====
Utility method for setting an attribute on a DOM node.
* Parameters *
	* *element*
		DOM node to manipulate, eg. the result of a document.getElementById call.
	* *attribute_name*
		Name of the attribute to set, eg. 'class' or 'id' or 'href'
	* *attribute_value*
		Value to set the attribute to, eg. 'http://bit.ly'

*Example:*
{{{
	var a = BitlyClient.createElement('a', {'text': 'http://bit.ly'});
	a.setAttribute('href', 'http://bit.ly');
	document.body.appendChild(a);
}}}

==== loadModules ====
Load one of the bit.ly javascript client library modules. These modules provide very easy ways to do common tasks, like append stats to each bit.ly URL on a page or insert a traffic / referrers data table.
* Parameters *
	* *module_names*
		Array containing the names of modules you wish to load.
	* *callback_method_name*
		Method to be called when all modules you requested are done loading. Define this method within the !BitlyCB global namespace. *NOTE:* Because modules involve DOM manipulation, this callback method also waits for the page to load before firing.

*Example:*
{{{
	BitlyCB.modulesReady = function() {
		BitlyClient.addStatsToBitlyLinks(); // method defined in BitlyClient stats module
	}
	BitlyClient.loadModules(['stats'], 'BitlyCB.modulesReady');
}}}
