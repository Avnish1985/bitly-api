#summary bit.ly REST API method documentation
#labels Featured

= bit.ly API Documentation =

*bit.ly exposes its data via an Application Programming Interface (API), so developers can interact in a programmatic way with the bit.ly website. This document is the official reference for that functionality. The current API version is 3.0*

== Getting Started ==

Here are the topics covered in the bit.ly REST API documentation. Also, see our ApiBestPractices

*Sections*
<wiki:toc max_depth="3" />

----

== Authentication and Shared Parameters ==

All API endpoints require that authentication credentials be supplied as query arguments. Authentication can be either a login and apiKey or an OAuth request_token depending on the endpoint.

To get started, you'll need a free bit.ly user account and apiKey. Signup at: http://bit.ly/a/sign_up 

If you already have an account, you can find your apiKey at: http://bit.ly/a/your_api_key

 login=*login*&apiKey=*apiKey*

Note: the bitlyapidemo login and apiKey used in this document is intended for us as an example only.

----

== Request / Response Formats ==
All bit.ly APIs support an optional return format parameter. Note that *json* is the default response format. but *xml* is also available. Some endpoints also support a simple *txt* format.

 format=*json*

All bit.ly APIs support jsonp which is the json format with a callback specified, such as:

 format=json&callback=*callback_method*

 * All API requests should be against the domain `api.bit.ly` (see examples).

 * HTTP Response Status Code is 200 on all valid response in *json* and *xml* formats. In json and xml responses, the status_code and status_txt values indicate whether a request is well formed and valid.

 * For *txt* format calls, the HTTP Response Status Codes 403, 500 and 503 are used denote rate limiting, a problem with the request format, or an unknown error. The response body will be equivalent to status_txt in *json* and *xml* calls for non 200 response codes.

 * The *status_code* is 200 for a successful request, 403 when rate limited, 503 for an unknown error or temporary unavailability, and 500 for all other invalid requests or responses.

 * *status_txt* will be a value that describes the nature of any error encountered. Common values are `MISSING_ARG_%s` to denote a missing URL parameter, and `INVALID_%s` to denote an invalid value in a request parameter (where `%s` is substituted with the name of the request parameter). 

*Here are some examples:*

 * json `{ "status_code": 200, "status_txt": "OK", "data" : ... }`
 * json `{ "status_code": 403, "status_txt": "RATE_LIMIT_EXCEEDED", "data" : null }`
 * json `{ "status_code": 500, "status_txt": "INVALID_URI", "data" : null }`
 * json `{ "status_code": 500, "status_txt": "MISSING_ARG_LOGIN", "data" : null }`
 * json `{ "status_code": 503, "status_txt": "UNKNOWN_ERROR", "data" : null }`
 * jsonp `callback_method({ "status_code": 200, "status_txt": "OK", "data" : ... })`
 * xml 
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
     <status_code>200</status_code>
     <status_txt>OK</status_txt>
     <data>
         ...
     </data>
</response>
}}}

----
== Rate Limiting ==

bit.ly currently limits API users to no more than five concurrent connections from a single IP address. Also, bit.ly also institutes per-hour, per-minute, and per-ip rate limits for each API method.

While rate limits exist, default limits are more than sufficient for nearly any size site.

Please note that our API rate limits reset every hour on the hour. If you are experiencing rate limiting errors, please wait until the top of the hour to resume making API calls.

To avoid common causes of rate limiting issues, please read our ApiBestPractices.

=== High-volume users ===
If you're a high-volume user of the bit.ly API, please contact us at api@bit.ly to discuss your options.

When contacting bit.ly support include a description of how you are using the bit.ly API, which API endpoints you are using, and a current request volume over a 24 hour period.

----
== OAuth ==

bit.ly currently supports the OAuth 2 draft specification.  All OAuth 2 requests MUST use the SSL endpoint available at `https://api-ssl.bit.ly/`

OAuth 2.0 is a simple and secure authentication mechanism. It allows web applications to acquire an access token for bit.ly via a quick redirect to the bit.ly site. Once a web application has an access token, it can access a user’s link metrics, and shorten links using that user’s bit.ly account.  Authentication with OAuth can be accomplished in the following steps:

=== OAuth Web Flow ===

Web applications can easily acquire an OAuth access token for a bit.ly end user by following these steps:

  * Register your application from within your bit.ly account settings -- your application will be assigned a client_id and a client_secret. Request access to register your application by emailing api@bit.ly.

  * Redirect the user to https://bit.ly/oauth/authorize, using the client_id and redirect_uri parameters to pass your client ID and the page you would like to redirect to upon acquiring an access token.  An example redirect URL looks like: ` https://bit.ly/oauth/authorize?client_id=...&redirect_uri=http://myexamplewebapp.com/oauth_page`

  * Upon authorizing your application, the user is directed to the page specified in the redirect_uri parameter. We append a “code” parameter to this URI, that contains a value that can be exchanged for an OAuth access token using the oauth/access_token endpoint documented below.  For example, if you passed a redirect_uri value of `http://myexamplewebapp.com/oauth_page`, a successful authentication will redirect the user to `http://myexamplewebapp.com/oauth_page?code=...`.  

  *  Use the /oauth/access_token API endpoint documented below to acquire an OAuth access token, passing the “code” value appended by bit.ly to the previous redirect and the same redirect_uri value that was used previously.  This API endpoint will return an OAuth access token, as well as the specified bit.ly user’s login and API key, allowing your application to utilize the bit.ly API on that user’s behalf.

=== OAuth XAuth Flow ===

For applications where OAuth web flow cannot be used (for example, mobile applications without a browser layer), an OAuth access token can be acquired by making a single call to the /oauth/access_token API endpoint and passing the end-user’s bit.ly account credentials with the x_auth_username and x_auth_password parameters. *Note that the end-user need only enter his/her username and password once for the application to authenticate -- applications using XAuth SHOULD NOT store end-user passwords.  Authentication via XAuth must be requested by e-mailing api@bit.ly.*

----
== QR Codes ==

To generate a QR code, simply append `.qrcode` to the end of any bit.ly link. For example, the following URL: `http://bit.ly/3eI7.qrcode` returns a QR code for the bit.ly link to this page.

----
== REST API ==

=== /v3/shorten ===
For a long URL, /v3/shorten encodes a URL and returns a short one.

* Parameters *
  * * format * (optional) indicates the requested response format. supported formats: json (default), xml, txt.
  * * longUrl * is a long URL to be shortened (example: http://betaworks.com/).
  * * domain * (optional) refers to a preferred domain; either bit.ly [default] or j.mp. This affects the output value of `url`.
  * *x_login* (optional) is the end-user's login when make requests on behalf of another bit.ly user. This allows application developers to pass along an end user's bit.ly login.
  * *x_apiKey* (optional) is the end-user's apiKey when making requests on behalf of another bit.ly user. This allows application developers to pass along an end user's bit.ly apiKey.
    
* Notes *
 * Long URLs should be [http://en.wikipedia.org/wiki/Percent-encoding URL-encoded]. You can not include a `longUrl` in the request that has '&', '?', '#', ' ', or other reserved parameters without first encoding it.
 * Long URLs should not contain spaces: any `longUrl` with spaces will be rejected. All spaces should be either percent encoded (%20) or plus encoded (+). Note that tabs, newlines and trailing spaces are all indications of errors. Please remember to strip leading and trailing whitespace from any user input before shortening.
 * Long URLs must have a slash between the domain and the path component. For example, `http://example.com?query=parameter` is invalid, and instead should be formatted as `http://example.com/?query=parameter`
 * When including `x_login` and `x_apiKey`, the shortened URL will be inserted into the history for the user specified by `x_login`. it will not be inserted into the history for the user specified by `login`.

* Output *

 * *`new_hash`* designates if this is the first time this `long_url` was shortened . The return value will equal `1` the first time a long_url is shortened. It will also then be added to the user history.
 * *`url `* is the actual link that should be used, and is a unique value for the given bit.ly account.
 * *`hash`* is a bit.ly identifier for `long_url` which is unique to the given account. 
 * *`global_hash`* is a bit.ly identifier for `long_url` which can be used to track aggregate stats across all matching bit.ly links.
 * *`long_url`* is an echo back of the longUrl request parameter. This may not always be equal to the URL requested. That's because some URL normalization may occur (e.g., due to encoding differences, or case differences in the domain). This `long_url` will always be functionally identical the the request parameter.

* Examples *
  * json format `http://api.bit.ly/v3/shorten?login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&longUrl=http%3A%2F%2Fbetaworks.com%2F&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "url": "http://bit.ly/cmeH01", 
        "hash": "cmeH01", 
        "global_hash": "1YKMfY", 
        "long_url": "http://betaworks.com/", 
        "new_hash": 0
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/shorten?login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&longUrl=http%3A%2F%2Fbetaworks.com%2F&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <status_txt>OK</status_txt>
    <data>
        <url>http://bit.ly/cmeH01</url>
        <hash>cmeH01</hash>
        <global_hash>1YKMfY</global_hash>
        <long_url>http://betaworks.com/</long_url>
        <new_hash>0</new_hash>
    </data>
</response>
}}}

  * txt format `http://api.bit.ly/v3/shorten?login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&longUrl=http%3A%2F%2Fbetaworks.com%2F&format=txt`
{{{
http://bit.ly/cmeH01
}}}


----

=== /v3/expand ===
Given a bit.ly URL or hash (or multiple), /v3/expand decodes it and returns back the target URL.

* Parameters *

  * *format*  (optional) indicates the requested response format. supported formats: json (default), xml, txt.
  * *shortUrl* refers to one or more bit.ly URLs, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
  * *hash* refers to one or more bit.ly hashes, (e.g.: 2bYgqR or a-custom-name ).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter
 * The maximum number of `shortUrl` and `hash` parameters is 15

* Output *
  * *short_url* this is an echo back of the shortUrl request parameter.
  * *hash* this is an echo back of the hash request parameter.
  * *user_hash* is the corresponding bit.ly user identifier.
  * *global_hash* is the corresponding bit.ly aggregate identifier.
  * *error* indicates there was an error retrieving data for a given shortUrl or hash. An example error is "NOT_FOUND".
  * *long_url* is the URL that the requested `short_url` or `hash` points to.

* Examples *
  * json format `http://api.bit.ly/v3/expand?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a35.&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "expand": [
            {
                "short_url": "http://tcrn.ch/a4MSUH", 
                "global_hash": "bWw49z", 
                "long_url": "http://www.techcrunch.com/2010/01/29/windows-mobile-foursquare/", 
                "user_hash": "a4MSUH"
            }, 
            {
                "short_url": "http://bit.ly/1YKMfY", 
                "global_hash": "1YKMfY", 
                "long_url": "http://betaworks.com/", 
                "user_hash": "1YKMfY"
            }, 
            {
                "long_url": "http://www.scotster.com/qf/?1152", 
                "global_hash": "lLWr", 
                "hash": "j3", 
                "user_hash": "j3"
            }, 
            {
                "hash": "a35.", 
                "error": "NOT_FOUND"
            }
        ]
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/expand?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a35.&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <status_txt>OK</status_txt>
    <data>
        <entry>
            <short_url>http://tcrn.ch/a4MSUH</short_url>
            <long_url>http://www.techcrunch.com/2010/01/29/windows-mobile-foursquare/</long_url>
            <user_hash>a4MSUH</user_hash>
            <global_hash>bWw49z</global_hash>
        </entry>
        <entry>
            <short_url>http://bit.ly/1YKMfY</short_url>
            <long_url>http://betaworks.com/</long_url>
            <user_hash>1YKMfY</user_hash>
            <global_hash>1YKMfY</global_hash>
        </entry>
        <entry>
            <hash>j3</hash>
            <long_url>http://www.scotster.com/qf/?1152</long_url>
            <user_hash>j3</user_hash>
            <global_hash>lLWr</global_hash>
        </entry>
        <entry>
            <error>NOT_FOUND</error>
            <hash>a35.</hash>
        </entry>
    </data>
</response>
}}}
  * json format `http://api.bit.ly/v3/expand?shortUrl=http%3A%2F%2Fbit.ly%2F31IqMl&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "expand": [
            {
                "short_url": "http://bit.ly/31IqMl", 
                "global_hash": "31IqMl", 
                "long_url": "http://cnn.com/", 
                "user_hash": "31IqMl"
            }
        ]
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/expand?shortUrl=http%3A%2F%2Fbit.ly%2F31IqMl&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <status_txt>OK</status_txt>
    <data>
        <entry>
            <short_url>http://bit.ly/31IqMl</short_url>
            <long_url>http://cnn.com/</long_url>
            <user_hash>31IqMl</user_hash>
            <global_hash>31IqMl</global_hash>
        </entry>
    </data>
</response>
}}}

  * txt format `http://api.bit.ly/v3/expand?shortUrl=http%3A%2F%2Fbit.ly%2F31IqMl&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=txt`
{{{
http://cnn.com/
}}}
----


=== /v3/validate ===
For any given a bit.ly user login and apiKey, you can validate that the pair is active.

* Parameters *
  * *format* (optional) indicates the requested response format. supported formats: json (default), xml, txt.
  * *x_login* is the end users user's bit.ly login (for validation).
  * *x_apiKey* is the end users bit.ly apiKey (for validation).

* Output *

  * *`valid`* 0 or 1 designating whether the x_login and x_apiKey pair is currently valid.

* Examples *
  * json format `http://api.bit.ly/v3/validate?x_login=notbilytapi&x_apiKey=not_apikey&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "valid": 0
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/validate?x_login=notbilytapi&x_apiKey=not_apikey&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <status_txt>OK</status_txt>
    <data>
        <valid>0</valid>
    </data>
</response>


}}}

  * txt format `http://api.bit.ly/v3/validate?x_login=notbilytapi&x_apiKey=not_apikey&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=txt`
{{{
0
}}}

----
=== /v3/clicks ===
For one or more bit.ly URL's or hashes, you can generate statistics about the clicks on that link. 

* Parameters *

  * *format* (optional) indicates the requested response format. supported formats: json (default), xml.
  * *shortUrl* refers to one or more bit.ly URLs, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
  * *hash* refers to one or more bit.ly hashes, (e.g.: 2bYgqR or a-custom-name).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter
 * The maximum number of `shortUrl` and `hash` parameters is 15

* Output *
  * *short_url* this matches the shortUrl request parameter.
  * *hash* this matches the hash request parameter.
  * *user_hash* is the corresponding bit.ly user identifier.
  * *global_hash* is the corresponding bit.ly aggregate identifier.
  * *user_clicks* this is the total count of clicks to this users bit.ly link.
  * *global_clicks* this is the total count of clicks to all bit.ly links that point to the same same long url.
  * *error* indicates there was an error retrieving data for a given shortUrl or hash. An example error is "NOT_FOUND"

* Examples *
  * json format `http://api.bit.ly/v3/clicks?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a35.&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "clicks": [
            {
                "short_url": "http://tcrn.ch/a4MSUH", 
                "global_hash": "bWw49z", 
                "user_clicks": 0, 
                "user_hash": "a4MSUH", 
                "global_clicks": 1105
            }, 
            {
                "short_url": "http://bit.ly/1YKMfY", 
                "global_hash": "1YKMfY", 
                "user_clicks": 2218, 
                "user_hash": "1YKMfY", 
                "global_clicks": 2218
            }, 
            {
                "hash": "j3", 
                "global_hash": "lLWr", 
                "user_clicks": 105, 
                "user_hash": "j3", 
                "global_clicks": 106
            }, 
            {
                "hash": "a35.", 
                "error": "NOT_FOUND"
            }
        ]
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/clicks?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a35.&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <clicks>
            <short_url>http://tcrn.ch/a4MSUH</short_url>
            <global_hash>bWw49z</global_hash>
            <user_clicks>0</user_clicks>
            <user_hash>a4MSUH</user_hash>
            <global_clicks>1105</global_clicks>
        </clicks>
        <clicks>
            <short_url>http://bit.ly/1YKMfY</short_url>
            <global_hash>1YKMfY</global_hash>
            <user_clicks>2218</user_clicks>
            <user_hash>1YKMfY</user_hash>
            <global_clicks>2218</global_clicks>
        </clicks>
        <clicks>
            <user_clicks>105</user_clicks>
            <global_hash>lLWr</global_hash>
            <hash>j3</hash>
            <user_hash>j3</user_hash>
            <global_clicks>106</global_clicks>
        </clicks>
        <clicks>
            <hash>a35.</hash>
            <error>NOT_FOUND</error>
        </clicks>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

----
=== /v3/referrers ===
Provides a list of referring sites for a specified bit.ly short link, and the number of clicks per referrer.

* Parameters *

 * *format* (optional) indicates the requested response format. supported formats: json (default), xml.
 * *shortUrl* refers a bit.ly URL, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
 * *hash* refers to a bit.ly hashes, (e.g.: 2bYgqR or a-custom-name).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter.
 * This API endpoint can only provide data for one bit.ly short link per API call.

* Output *
 * *short_url* this matches the shortUrl request parameter.
 * *hash* this matches the hash request parameter.
 * *user_hash* is the corresponding bit.ly user identifier.
 * *global_hash* is the corresponding bit.ly aggregate identifier.
 * *referrer* is a referring site for a given bit.ly link.
 * *referrer_app* is a referring application (such as Tweetdeck) for a given bit.ly link.
 * *url* is the URL of a referring application (such as http://tweetdeck.com).
 * *clicks* is the number of clicks from the corresponding referrer. 

* Examples *
  * json format `http://api.bit.ly/v3/referrers?shortUrl=http%3A%2F%2Fbit.ly%2FdjZ9g4&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "created_by": "bitly",
        "global_hash": "djZ9g4",
        "referrers": [
            {
                "clicks": 42,
                "referrer": "direct"
            },
            {
                "clicks": 15,
                "referrer": "http://twitter.com/"
            },
            {
                "clicks": 12,
                "referrer": "http://twitter.com/bitly"
            },
            {
                "clicks": 8,
                "referrer_app": "TweetDeck",
                "url": "http://www.tweetdeck.com/"
            },
            {
                "clicks": 1,
                "referrer": "http://bit.ly/a/sidebar"
            },
            {
                "clicks": 1,
                "referrer": "http://translate.googleusercontent.com/translate_c"
            },
            {
                "clicks": 1,
                "referrer": "http://twitter.com/atul/statuses/26029156685"
            },
            {
                "clicks": 1,
                "referrer": "http://twitter.com/home"
            },
            {
                "clicks": 1,
                "referrer": "http://untiny.me/"
            }
        ],
        "short_url": "http://bit.ly/djZ9g4",
        "user_hash": "djZ9g4"
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/referrers?shortUrl=http%3A%2F%2Fbit.ly%2FdjZ9g4&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <short_url>http://bit.ly/djZ9g4</short_url>
        <global_hash>djZ9g4</global_hash>
        <user_hash>djZ9g4</user_hash>
        <created_by>bitly</created_by>
        <referrers>
            <referrer>direct</referrer>
            <clicks>42</clicks>
        </referrers>
        <referrers>
            <referrer>http://twitter.com/</referrer>
            <clicks>15</clicks>
        </referrers>
        <referrers>
            <referrer>http://twitter.com/bitly</referrer>
            <clicks>12</clicks>
        </referrers>
        <referrers>
            <url>http://www.tweetdeck.com/</url>
            <referrer_app>TweetDeck</referrer_app>
            <clicks>8</clicks>
        </referrers>
        <referrers>
            <referrer>http://bit.ly/a/sidebar</referrer>
            <clicks>1</clicks>
        </referrers>
        <referrers>
            <referrer>http://translate.googleusercontent.com/translate_c</referrer>
            <clicks>1</clicks>
        </referrers>
        <referrers>
            <referrer>http://twitter.com/atul/statuses/26029156685</referrer>
            <clicks>1</clicks>
        </referrers>
        <referrers>
            <referrer>http://twitter.com/home</referrer>
            <clicks>1</clicks>
        </referrers>
        <referrers>
            <referrer>http://untiny.me/</referrer>
            <clicks>1</clicks>
        </referrers>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

----
=== /v3/countries ===
Provides a list of countries from which clicks on a specified bit.ly short link have originated, and the number of clicks per country.

* Parameters *

 * *format* (optional) indicates the requested response format. supported formats: json (default), xml.
 * *shortUrl* refers a bit.ly URL, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
 * *hash* refers to a bit.ly hashes, (e.g.: 2bYgqR or a-custom-name).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter.
 * This API endpoint can only provide data for one bit.ly short link per API call.

* Output *
 * *short_url* this matches the shortUrl request parameter.
 * *hash* this matches the hash request parameter.
 * *user_hash* is the corresponding bit.ly user identifier.
 * *global_hash* is the corresponding bit.ly aggregate identifier.
 * *countries* is a list of countries from which clicks on the bit.ly short link have originated.
 * *clicks* is the number of clicks that have originated from the corresponding country.

* Examples *
  * json format `http://api.bit.ly/v3/countries?shortUrl=http%3A%2F%2Fbit.ly%2FdjZ9g4&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "countries": [
            {"clicks": 40, "country": "US"},
            {"clicks": 7,"country": null},
            {"clicks": 4,"country": "AU"},
            {"clicks": 4,"country": "BR"},
            {"clicks": 4,"country": "FR"},
            {"clicks": 3,"country": "CA"},
            {"clicks": 3,"country": "GB"},
            {"clicks": 2,"country": "DE"},
            {"clicks": 2,"country": "IN"},
            {"clicks": 2,"country": "NO"},
            {"clicks": 2,"country": "PL"},
            {"clicks": 2,"country": "TW"},
            {"clicks": 1,"country": "BE"},
            {"clicks": 1,"country": "BG"},
            {"clicks": 1,"country": "ES"},
            {"clicks": 1,"country": "HK"},
            {"clicks": 1,"country": "PH"},
            {"clicks": 1,"country": "PT"},
            {"clicks": 1,"country": "SE"},
            {"clicks": 1,"country": "VE"}
        ],
        "created_by": "bitly",
        "global_hash": "djZ9g4",
        "short_url": "http://bit.ly/djZ9g4",
        "user_hash": "djZ9g4"
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/countries?shortUrl=http%3A%2F%2Fbit.ly%2FdjZ9g4&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <short_url>http://bit.ly/djZ9g4</short_url>
        <global_hash>djZ9g4</global_hash>
        <user_hash>djZ9g4</user_hash>
        <created_by>bitly</created_by>
        <countries><country>US</country><clicks>40</clicks></countries>
        <countries><country/><clicks>7</clicks></countries>
        <countries><country>AU</country><clicks>4</clicks></countries>
        <countries><country>BR</country><clicks>4</clicks></countries>
        <countries><country>FR</country><clicks>4</clicks></countries>
        <countries><country>CA</country><clicks>3</clicks></countries>
        <countries><country>GB</country><clicks>3</clicks></countries>
        <countries><country>DE</country><clicks>2</clicks></countries>
        <countries><country>IN</country><clicks>2</clicks></countries>
        <countries><country>NO</country><clicks>2</clicks></countries>
        <countries><country>PL</country><clicks>2</clicks></countries>
        <countries><country>TW</country><clicks>2</clicks></countries>
        <countries><country>BE</country><clicks>1</clicks></countries>
        <countries><country>BG</country><clicks>1</clicks></countries>
        <countries><country>ES</country><clicks>1</clicks></countries>
        <countries><country>HK</country><clicks>1</clicks></countries>
        <countries><country>PH</country><clicks>1</clicks></countries>
        <countries><country>PT</country><clicks>1</clicks></countries>
        <countries><country>SE</country><clicks>1</clicks></countries>
        <countries><country>VE</country><clicks>1</clicks></countries>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}


----
=== /v3/clicks_by_minute ===
For one or more bit.ly links, provides time series clicks per minute for the last hour in reverse chronological order (most recent to least recent).

* Parameters *

 * *format* (optional) indicates the requested response format. supported formats: json (default), xml.
 * *shortUrl* refers to one or more bit.ly URLs, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
 * *hash* refers to one or more bit.ly hashes, (e.g.: 2bYgqR or a-custom-name).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter
 * The maximum number of `shortUrl` and `hash` parameters is 15

* Output *
 * *short_url* this matches the shortUrl request parameter.
 * *hash* this matches the hash request parameter.
 * *user_hash* is the corresponding bit.ly user identifier.
 * *global_hash* is the corresponding bit.ly aggregate identifier.
 * *clicks* is the number of clicks received for a given link that minute.

* Examples *

  * json format `http://api.bit.ly/v3/clicks_by_minute?shortUrl=http%3A%2F%2Fj.mp%2F9DguyN&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "clicks_by_minute": [
            {
                "clicks": [0,0,0,0,2,2,4,3,1,0,1,0,2,0,0,0,1,1,0,0,2,1,1,3,1,2,1,1,0,1,1,0,1,1,1,0,1,1,1,0,2,3,1,1,3,2,0,3,3,2,2,1,3,3,2,1,0,4,0,2,1],
                "global_hash": "9DguyN",
                "short_url": "http://j.mp/9DguyN",
                "user_hash": "9DguyN"
            }
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/clicks_by_minute?shortUrl=http%3A%2F%2Fj.mp%2F9DguyN&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <clicks_by_minute>
            <short_url>http://j.mp/9DguyN</short_url>
            <global_hash>9DguyN</global_hash>
            <user_hash>9DguyN</user_hash>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>2</clicks>
            <clicks>2</clicks>
            <clicks>4</clicks>
            <clicks>3</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>2</clicks>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>0</clicks>
            <clicks>2</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>3</clicks>
            <clicks>1</clicks>
            <clicks>2</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>2</clicks>
            <clicks>3</clicks>
            <clicks>1</clicks>
            <clicks>1</clicks>
            <clicks>3</clicks>
            <clicks>2</clicks>
            <clicks>0</clicks>
            <clicks>3</clicks>
            <clicks>3</clicks>
            <clicks>2</clicks>
            <clicks>2</clicks>
            <clicks>1</clicks>
            <clicks>3</clicks>
            <clicks>3</clicks>
            <clicks>2</clicks>
            <clicks>1</clicks>
            <clicks>0</clicks>
            <clicks>4</clicks>
            <clicks>0</clicks>
            <clicks>2</clicks>
            <clicks>1</clicks>
        </clicks_by_minute>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}


----
=== /v3/bitly_pro_domain ===

This is used to query whether a given short domain is assigned for bitly.Pro, and is consequently a valid shortUrl parameter for other api calls. keep in mind that bitly.pro domains are restricted to less than 15 characters in length.

* Parameters *

  * *domain* A short domain (ie: nyti.ms).
  * *format* (optional) indicates the requested response format. supported formats: json (default), xml.

* Output *

  * *bitly_pro_domain* 0 or 1 designating whether this is a current bitly.Pro domain.
  * *domain* this is an echo back of the request parameter.

* Examples *
  * json format `http://api.bit.ly/v3/bitly_pro_domain?domain=nyti.ms&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=json`
{{{
{
    "status_code": 200, 
    "data": {
        "domain": "nyti.ms", 
        "bitly_pro_domain": 1
    }, 
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/bitly_pro_domain?domain=nyti.ms&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <domain>nyti.ms</domain>
        <bitly_pro_domain>1</bitly_pro_domain>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

----
=== /v3/lookup ===

This is used to query for a bit.ly link based on a long URL. For example you would use `/v3/lookup` followed by `/v3/clicks` to find click data when you have a long URL to start with.

* Parameters *

  * *url* One or more long URLs to lookup.
  * *format* (optional) indicates the requested response format. supported formats: json (default), xml.

* Note *

  * The maximum number of url parameters is 15

* Output *

  * *url* an echo back of the url parameter.
  * *short_url* is the corresponding bit.ly short link.
  * *global_hash* is the corresponding bit.ly aggregate identifier.

* Examples *
  * json format `http://api.bit.ly/v3/lookup?url=http%3A%2F%2Fbetaworks.com%2F&url=http%3A%2F%2Fcode.google.com%2Fp%2Fbitly-api%2F&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "lookup": [
            {
                "global_hash": "beta",
                "short_url": "http://bit.ly/beta",
                "url": "http://betaworks.com/"
            },
            {
                "global_hash": "1oDCU",
                "short_url": "http://bit.ly/1oDCU",
                "url": "http://code.google.com/p/bitly-api/"
            }
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/lookup?url=http%3A%2F%2Fbetaworks.com%2F&url=http%3A%2F%2Fcode.google.com%2Fp%2Fbitly-api%2F&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <lookup>
            <url>http://betaworks.com/</url>
            <short_url>http://bit.ly/beta</short_url>
            <global_hash>beta</global_hash>
        </lookup>
        <lookup>
            <url>http://code.google.com/p/bitly-api/</url>
            <short_url>http://bit.ly/1oDCU</short_url>
            <global_hash>1oDCU</global_hash>
        </lookup>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

  * json format `http://api.bit.ly/v3/lookup?url=asdf%3A%2F%2Fwww.google.com%2Fnot%2Fa%2Freal%2Flink&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "lookup": [
            {
                "error": "NOT_FOUND",
                "url": "asdf://www.google.com/not/a/real/link"
            }
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}

  * xml format `http://api.bit.ly/v3/lookup?url=asdf%3A%2F%2Fwww.google.com%2Fnot%2Fa%2Freal%2Flink&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <lookup>
            <url>asdf://www.google.com/not/a/real/link</url>
            <error>NOT_FOUND</error>
        </lookup>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}
 
----
=== /v3/authenticate ===

This is used by applications to lookup a bit.ly API key for a user given a bit.ly username and password.

Access to this endpoint is restricted and must be requested by emailing api@bit.ly. When requesting access include your application login and apiKey, and a description of your use case and an estimated volume of requests.

* Parameters *

  * *x_login* is the end-user's bit.ly username or email address.
  * *x_password* is the end-user's bit.ly password.
  * *format* (optional) indicates the requested response format. supported formats: json (default), xml.

* Note *

  * This request must be a HTTP POST, and can not be a HTTP GET request.

* Output *

  * *successful* is an indicator of weather or not the login and password combination is valid.
  * *username* is the corresponding bit.ly users username.
  * *api_key* is the corresponding bit.ly users `apiKey`

* Examples *
  * json format `http://api.bit.ly/v3/authenticate`
  POST: `x_login=bitlyapidemo&x_password=bad-password&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=json`
{{{
{
    "data": {
        "authenticate": {
            "successful": false
        }
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/authenticate`
  POST: `x_login=bitlyapidemo&x_password=bad-password&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <authenticate>
            <successful>0</successful>
        </authenticate>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}


  * json format `http://api.bit.ly/v3/authenticate`
  POST: `x_login=bitlyapidemo&x_password=good-password&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=json`
{{{
{
    "data": {
        "authenticate": {
            "api_key": "R_0da49e0a9118ff35f52f629d2d71bf07",
            "successful": true,
            "username": "bitlyapidemo"
        }
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/authenticate`
  POST: `x_login=bitlyapidemo&x_password=good-password&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&login=bitlyapidemo&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <authenticate>
            <username>bitlyapidemo</username>
            <successful>1</successful>
            <api_key>R_0da49e0a9118ff35f52f629d2d71bf07</api_key>
        </authenticate>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

----
=== /v3/info ===

This is used to return the page title for a given bit.ly link.

* Parameters *
  * *format*  (optional) indicates the requested response format. supported formats: json (default), xml, txt.
  * *shortUrl* refers to one or more bit.ly URLs, (e.g.: http://bit.ly/1RmnUT or http://j.mp/1RmnUT).
  * *hash* refers to one or more bit.ly hashes, (e.g.: 2bYgqR or a-custom-name ).

* Note *

 * Either `shortUrl` or `hash` must be given as a parameter
 * The maximum number of `shortUrl` and `hash` parameters is 15

* Output *
  * *short_url* this is an echo back of the shortUrl request parameter.
  * *hash* this is an echo back of the hash request parameter.
  * *user_hash* is the corresponding bit.ly user identifier.
  * *global_hash* is the corresponding bit.ly aggregate identifier.
  * *error* indicates there was an error retrieving data for a given shortUrl or hash. An example error is "NOT_FOUND".
  * *title* is the HTML page title for the destination page (when available).
  * *created_by* the bit.ly username that originally shortened this link.

* Examples *
  * json format `http://api.bit.ly/v3/info?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a.35&format=json`
{{{
{
    "data": {
        "info": [
            {
                "created_by": "scotster",
                "global_hash": "lLWr",
                "hash": "j3",
                "title": null,
                "user_hash": "j3"
            },
            {
                "error": "NOT_FOUND",
                "hash": "a.35"
            },
            {
                "created_by": "j3h14h",
                "global_hash": "bWw49z",
                "short_url": "http://tcrn.ch/a4MSUH",
                "title": "Windows Mobile Finally Checks Out Foursquare",
                "user_hash": "a4MSUH"
            },
            {
                "created_by": "bitly",
                "global_hash": "1YKMfY",
                "short_url": "http://bit.ly/1YKMfY",
                "title": null,
                "user_hash": "1YKMfY"
            }
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}


  * xml format `http://api.bit.ly/v3/info?shortUrl=http%3A%2F%2Ftcrn.ch%2Fa4MSUH&shortUrl=http%3A%2F%2Fbit.ly%2F1YKMfY&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&hash=j3&hash=a.35&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <info>
            <global_hash>lLWr</global_hash>
            <hash>j3</hash>
            <user_hash>j3</user_hash>
            <created_by>scotster</created_by>
            <title/>
        </info>
        <info>
            <hash>a.35</hash>
            <error>NOT_FOUND</error>
        </info>
        <info>
            <short_url>http://tcrn.ch/a4MSUH</short_url>
            <global_hash>bWw49z</global_hash>
            <user_hash>a4MSUH</user_hash>
            <created_by>j3h14h</created_by>
            <title>Windows Mobile Finally Checks Out Foursquare</title>
        </info>
        <info>
            <short_url>http://bit.ly/1YKMfY</short_url>
            <global_hash>1YKMfY</global_hash>
            <user_hash>1YKMfY</user_hash>
            <created_by>bitly</created_by>
            <title/>
        </info>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}

----
=== /oauth/access_token ===

This endpoint returns an OAuth access token. To register an OAuth application, contact api@bit.ly. 

* Parameters for OAuth Web flow*
   * *client_id* is your application’s bit.ly client id.
   * *client_secret* is your application’s bit.ly client secret.
   * *code* is the OAuth verification code acquired via OAuth’s web authentication protocol.
   * *redirect_uri* is the page to which a user was redirected upon successfully authenticating. 

* Parameters for OAuth XAuth*
   * *client_id* is your application’s bit.ly client id.
   * *client_secret* is your application’s bit.ly client secret.
   * *x_auth_username* is the end-user's bit.ly username *for XAuth authentication only*.
   * *x_auth_password* is the end-user's bit.ly password *for XAuth authentication only*..
* Note * 
  * This request MUST be a `HTTP POST` request.
  * This endpoint is only available on `https://api-ssl.bit.ly/`
  * The x_auth_username and x_auth_password are only to be used when authentication via web redirect is not possible (for example, mobile applications without a browser layer). Access to these parameters must be requested by e-mailing api@bit.ly.

* Output *

URL encoded string in the format of access_token=%s&login=%s&apiKey=%s
   * *access_token* is the OAuth access token for specified user
   * *login* is the end-user’s bit.ly username
   * *apiKey* is the end-user’s bit.ly API key

<wiki:comment>
* Examples *

{{{
curl -F 'client_id=388f84ca4f128dd3cba0819aa67d7c9380ad4400' \
       -F 'client_secret=cae8d040187d4570c25cebe015ec2ffff056f86e' \
       -F 'code=abc12345aabbexample' \
        -F 'redirect_uri=http://myexamplewebapp.com/oauth_page' \
https://api.bit.ly/oauth/access_token
}}}
{{{
access_token=f356652cf912f5ce51de5b614f1aacfc48fc1da7&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
}}}

{{{
curl -F 'client_id=388f84ca4f128dd3cba0819aa67d7c9380ad4400' \
       -F 'client_secret=cae8d040187d4570c25cebe015ec2ffff056f86e' \
       -F 'x_auth_username=bitlyapidemo' \
        -F 'x_auth_password=password' \
https://api.bit.ly/oauth/access_token
}}}
{{{
access_token=f356652cf912f5ce51de5b614f1aacfc48fc1da7&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07
}}}
</wiki:comment>

----
=== /v3/user/clicks ===

OAuth 2 endpoint that provides the total clicks per day on a user’s bit.ly links.

* Parameters *

   * *access_token* is the OAuth access token for a bit.ly user
   * *days* (optional) an integer value for the number of days (counting backwards from the current day) from which to retrieve data (min:1, max:30, default:7).
   * * format * (optional) indicates the requested response format. Supported formats: json (default), xml.

* Note *
  * This endpoint is only available on `https://api-ssl.bit.ly/`
  * Results are returned in reverse chronological order (from most recent to least recent)

* Output *
  * *clicks* the total number of clicks on that day

<wiki:comment>
* Examples *

  * json format `https://api-ssl.bit.ly/v3/user/clicks?access_token=41c1eb48e830a9942d5f1a21896932137f40b9be&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "days": 7,
        "results": [
            2,
            45,
            92,
            7,
            0,
            0,
            0
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}
</wiki:comment>

----
=== /v3/user/referrers ===

OAuth 2 endpoint that provides a list of top referrers (up to 500 per day) for a given user’s bit.ly links, and the number of clicks per referrer.

* Parameters *

   * *access_token* is the OAuth access token for a bit.ly user,
   * *days* (optional) an integer value for the number of days (counting backwards from the current day) from which to retrieve data (min:1, max:30, default:7)
   * * format * (optional) indicates the requested response format. Supported formats: json (default), xml.

* Note *
  * This endpoint is only available on `https://api-ssl.bit.ly/`
  * Results are returned in reverse chronological order (from most recent to least recent).

* Output *
  * *referrers* a list of top referrers (up to 500) for that day.
  * *clicks* the number of clicks received from a given referrer for that day.

<wiki:comment>
* Examples *

 * json format `https://api-ssl.bit.ly/v3/user/referrers?access_token=41c1eb48e830a9942d5f1a21896932137f40b9be&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{{    "data": {        "days": 7,        "referrers": [            [                {                    "clicks": 4,                    "referrer": "http://bitly.org/"                },                {                    "clicks": 2,                    "referrer": "http://jehiah.cz/testa"                }            ],            [],            [],            [],            [],            [],            []        ]    },    "status_code": 200,    "status_txt": "OK"}}}}

  * xml format `https://api-ssl.bit.ly/v3/user/referrers?access_token=41c1eb48e830a9942d5f1a21896932137f40b9be&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <refererrs>
            <item>
                <referer>http://bitly.org/</referer>
                <clicks>4</clicks>
            </item>
            <item>
                <referer>http://jehiah.cz/testa</referer>
                <clicks>2</clicks>
            </item>
        </refererrs>
        <refererrs/>
        <refererrs/>
        <refererrs/>
        <refererrs/>
        <refererrs/>
        <refererrs/>
        <days>7</days>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}
</wiki:comment>

----
=== /v3/user/countries ===
 
OAuth 2 endpoint that provides a list of countries from which clicks on a given user’s bit.ly links are originating, and the number of clicks per country.

* Parameters *

   * *access_token* is the OAuth access token for a bit.ly user.
   * *days* (optional) an integer value for the number of days (counting backwards from the current day) from which to retrieve data (min:1, max:30, default:7).
   * * format * (optional) indicates the requested response format. supported formats: json (default), xml.

* Note *
  * This endpoint is only available on `https://api-ssl.bit.ly/`
  * Results are returned in reverse chronological order (from most recent to least recent).

* Output *
  * *countries* a list of countries from which clicks on the specified bit.ly user’s links are originating.
  * *clicks* the number of clicks originating from a given country.

----
=== /v3/user/realtime_links ===

OAuth 2 endpoint that provides a given user’s 100 most popular links based on click traffic in the past hour, and the number of clicks per link.

* Parameters *

   * *access_token* is the OAuth access token for a bit.ly user
   * * format * (optional) indicates the requested response format. supported formats: json (default), xml.

* Note *
   * This endpoint is only available on `https://api-ssl.bit.ly/`
   * This endpoint returns a maximum of 100 results.

* Output *
   * *clicks* is the number of clicks within the past hour.
   * *user_hash* is the corresponding bit.ly user link identifier.

<wiki:comment>
* Examples *
  * json format `https://api-ssl.bit.ly/v3/user/realtime_links?access_token=41c1eb48e830a9942d5f1a21896932137f40b9be&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=json`
{{{
{
    "data": {
        "realtime_links": [
            {
                "clicks": 15,
                "user_hash": "cKRxor"
            },
            {
                "clicks": 1,
                "user_hash": "bnC1ZD"
            }
        ]
    },
    "status_code": 200,
    "status_txt": "OK"
}
}}}
  * xml format `https://api-ssl.bit.ly/v3/user/realtime_links?access_token=41c1eb48e830a9942d5f1a21896932137f40b9be&login=bitlyapidemo&apiKey=R_0da49e0a9118ff35f52f629d2d71bf07&format=xml`
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response>
    <status_code>200</status_code>
    <data>
        <realtime_links>
            <clicks>15</clicks>
            <user_hash>cKRxor</user_hash>
        </realtime_links>
        <realtime_links>
            <clicks>1</clicks>
            <user_hash>bnC1ZD</user_hash>
        </realtime_links>
    </data>
    <status_txt>OK</status_txt>
</response>
}}}
</wiki:comment>

----

= Discussion = 

We invite you to visit our Google Group to discuss technical issues related to using the bit.ly API:
 
 http://groups.google.com/group/bitly-api

To report an error with a request or response please submit an issue:

 http://code.google.com/p/bitly-api/issues/list

----

= Revision History =

|| *Date** || *Change* ||
|| 2010-Oct-7 || added QR Code support ||
|| 2010-Sep-15 || added OAuth2 support, /v3/referrers, /v3/countries, /v3/clicks_by_minute, /v3/user/realtime_links, /v3/user/clicks /v3/user/countries /v3/user/referrers ||
|| 2010-Jun-28 || added /v3/info ||
|| 2010-Jun-4 || added /v3/lookup and /v3/authenticate ||
|| 2010-Mar-30 || Initial v3 documentation ||